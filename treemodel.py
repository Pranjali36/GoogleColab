# -*- coding: utf-8 -*-
"""TreeModel.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RgDPnou-fFyYw6t9H8rLB0ebWlgsYINf

#Cell 1 Install & Import Required Libraries
"""

!pip install pythreejs ipywidgets --quiet

from pythreejs import *
from IPython.display import display
import time
import numpy as np

"""#Cell 2: Set Up the 3D Scene"""

scene = Scene(background="#a3d5ff")

# Lighting
light = DirectionalLight(color='white', position=[3, 5, 1], intensity=0.8)
ambient_light = AmbientLight(color='#ffffff', intensity=0.5)
scene.add(light)
scene.add(ambient_light)

# Camera
camera = PerspectiveCamera(position=[0, 2, 5], fov=75)
controller = OrbitControls(controlling=camera)

# Renderer
renderer = Renderer(camera=camera, scene=scene, controls=[controller], width=800, height=500)
display(renderer)

from google.colab import output
output.enable_custom_widget_manager()

"""Support for third party widgets will remain active for the duration of the session. To disable support:"""

###from google.colab import output
###output.disable_custom_widget_manager()

""" #Cell 3: Simulate Tree Growth (Basic Aesthetic)"""

def create_tree(stage):
    trunk_height = stage * 0.2
    trunk = CylinderGeometry(radiusTop=0.05, radiusBottom=0.1, height=trunk_height)
    trunk_material = MeshLambertMaterial(color='saddlebrown')
    trunk_mesh = Mesh(trunk, trunk_material)
    trunk_mesh.position = (0, trunk_height / 2, 0)  # Correct way to set position

    foliage = SphereGeometry(radius=0.2 + 0.05 * stage, widthSegments=20, heightSegments=20)
    foliage_material = MeshLambertMaterial(color='pink', transparent=True, opacity=0.8)
    foliage_mesh = Mesh(foliage, foliage_material)
    foliage_mesh.position = (0, trunk_height + 0.3, 0)

    tree_group = Group(children=[trunk_mesh, foliage_mesh])
    return tree_group

# Grow tree over time
tree_group = None # Initialize tree_group outside the loop
for stage in range(1, 6):
    new_tree = create_tree(stage)
    # Remove existing tree if present
    if tree_group is not None and tree_group in scene.children:
        scene.remove(tree_group)
    tree_group = new_tree  # Update the tree_group reference
    scene.add(tree_group)  # Add new tree to the scene

# Get the foliage mesh to set light's target
foliage_mesh = tree_group.children[1]  # Foliage mesh (second child)

# Set the light position based on foliage position
# Get the foliage mesh to set light's target
foliage_mesh = tree_group.children[1]  # Foliage mesh (second child)

# Set the light position based on foliage position
light.position = [foliage_mesh.position[0], foliage_mesh.position[1] + 2, foliage_mesh.position[2] + 2]

# Instead of setting the target directly to foliage_mesh (which is a Mesh),
# create an Object3D and set its position to the foliage_mesh's position.
# Then, set the light's target to this Object3D.
light_target = Object3D()
light_target.position = foliage_mesh.position
light.target = light_target  # Point light at the target object

# Explicitly create a LightShadow and assign it to the light's shadow property
light.shadow = LightShadow(camera=PerspectiveCamera(fov=45)) # Adjust fov as needed
light.shadow.mapSize = (512, 512) # Set shadow map resolution


display(renderer)